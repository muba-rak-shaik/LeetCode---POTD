Problem Description : Minumun time to make the Rope Colorfull (Medium)

Alice has n balloons arranged on a rope. You are given a 0-indexed string colors where colors[i] is the color of the ith balloon.

Alice wants the rope to be colorful. She does not want two consecutive balloons to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it colorful. You are given a 0-indexed integer array neededTime where neededTime[i] is the time (in seconds) that Bob needs to remove the ith balloon from the rope.

Return the minimum time Bob needs to make the rope colorful.

 

Example 1:


Input: colors = "abaac", neededTime = [1,2,3,4,5]
Output: 3
Explanation: In the above image, 'a' is blue, 'b' is red, and 'c' is green.
Bob can remove the blue balloon at index 2. This takes 3 seconds.
There are no longer two consecutive balloons of the same color. Total time = 3.
Example 2:


Input: colors = "abc", neededTime = [1,2,3]
Output: 0
Explanation: The rope is already colorful. Bob does not need to remove any balloons from the rope.
Example 3:


Input: colors = "aabaa", neededTime = [1,2,3,4,1]
Output: 2
Explanation: Bob will remove the ballons at indices 0 and 4. Each ballon takes 1 second to remove.
There are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2.
 

Constraints:

n == colors.length == neededTime.length
1 <= n <= 105
1 <= neededTime[i] <= 104
colors contains only lowercase English letters.

### Solution in Python3 : ###

from typing import List

class Solution:
    def minCost(self, colors: str, neededTime: List[int]) -> int:
        total_cost = 0  # Initialize the total cost variable
        start_index = 0  # Initialize the start index for iterating through the neededTime list
        current_index = 0  # Initialize the current index for iteration

        while start_index < len(neededTime) and current_index < len(neededTime):
            current_total_time = 0  # Initialize the current total time variable
            current_max_time = 0  # Initialize the current maximum time variable

            # Iterate through consecutive elements with the same color
            while current_index < len(neededTime) and colors[start_index] == colors[current_index]:
                current_total_time += neededTime[current_index]
                current_max_time = max(current_max_time, neededTime[current_index])
                current_index += 1

            # Update the total cost by subtracting the maximum time for the current color
            total_cost += current_total_time - current_max_time
            start_index = current_index  # Move to the next set of elements with a different color

        return total_cost
