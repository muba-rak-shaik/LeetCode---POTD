Problem Description : String Comparision 11 (Hard)

Run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string "aabccc" we replace "aa" by "a2" and replace "ccc" by "c3". Thus the compressed string becomes "a2bc3".

Notice that in this problem, we are not adding '1' after single characters.

Given a string s and an integer k. You need to delete at most k characters from s such that the run-length encoded version of s has minimum length.

Find the minimum length of the run-length encoded version of s after deleting at most k characters.

 

Example 1:

Input: s = "aaabcccd", k = 2
Output: 4
Explanation: Compressing s without deleting anything will give us "a3bc3d" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = "abcccd" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be "a3c3" of length 4.
Example 2:

Input: s = "aabbaa", k = 2
Output: 2
Explanation: If we delete both 'b' characters, the resulting compressed string would be "a4" of length 2.
Example 3:

Input: s = "aaaaaaaaaaa", k = 0
Output: 3
Explanation: Since k is zero, we cannot delete anything. The compressed string is "a11" of length 3.
 

Constraints:

1 <= s.length <= 100
0 <= k <= s.length
s contains only lowercase English letters.

### Solution in Python3: ###

class Solution:
    def getLengthOfOptimalCompression(self, s: str, k: int) -> int:
        # Get the length of the input string
        n = len(s)
        
        # Initialize a 2D array 'dp' with dimensions 110x110 and set initial values to 9999
        dp = [[9999] * 110 for _ in range(110)]
        # Initialize the base case: when the string is empty and no deletions are allowed
        dp[0][0] = 0

        # Loop through each character in the string
        for i in range(1, n + 1):
            # Loop through the allowed number of deletions
            for j in range(0, k + 1):
                cnt, del_ = 0, 0
                
                # Iterate over the previous characters to check for compression opportunities
                for l in range(i, 0, -1):
                    if s[l - 1] == s[i - 1]:
                        cnt += 1
                    else:
                        del_ += 1

                    # Check if the current number of deletions is within the allowed limit
                    if j - del_ >= 0:
                        # Update the dynamic programming table with the optimal compression length
                        dp[i][j] = min(dp[i][j], dp[l - 1][j - del_] + 1 + (3 if cnt >= 100 else 2 if cnt >= 10 else 1 if cnt >= 2 else 0))

                # Consider the case where a character is deleted without compressing
                if j > 0:
                    dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])

        # Return the optimal compression length for the entire string
        return dp[n][k]
