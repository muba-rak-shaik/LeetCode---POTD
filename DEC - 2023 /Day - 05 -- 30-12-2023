Problem Description : Redistribute Characters to Make All Strings Equal (Easy)

You are given an array of strings words (0-indexed).

In one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j].

Return true if you can make every string in words equal using any number of operations, and false otherwise.

 

Example 1:

Input: words = ["abc","aabc","bc"]
Output: true
Explanation: Move the first 'a' in words[1] to the front of words[2],
to make words[1] = "abc" and words[2] = "abc".
All the strings are now equal to "abc", so return true.
Example 2:

Input: words = ["ab","a"]
Output: false
Explanation: It is impossible to make all the strings equal using the operation.
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 100
words[i] consists of lowercase English letters.

### Solution in Python3 : ###

from typing import List

class Solution:
    def makeEqual(self, words: List[str]) -> bool:
        # Create a dictionary to store the count of each character in all words
        counts = {}

        # Iterate through each word in the list
        for word in words:
            # Iterate through each character in the word
            for c in word:
                # Update the count of the character in the dictionary
                counts[c] = counts.get(c, 0) + 1

        # Get the total number of words
        n = len(words)

        # Check if the count of each character is a multiple of the total number of words
        for val in counts.values():
            if val % n != 0:
                # If not, it's not possible to make all words equal
                return False

        # If all characters can be distributed evenly among the words, return True
        return True
