Problem Description : Minimum Difficulty of a job Schedule (Hard)

You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i).

You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. The difficulty of a day is the maximum difficulty of a job done on that day.

You are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i].

Return the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.

 

Example 1:
Image : https://assets.leetcode.com/uploads/2020/01/16/untitled.png
Input: jobDifficulty = [6,5,4,3,2,1], d = 2
Output: 7
Explanation: First day you can finish the first 5 jobs, total difficulty = 6.
Second day you can finish the last job, total difficulty = 1.
The difficulty of the schedule = 6 + 1 = 7 
Example 2:

Input: jobDifficulty = [9,9,9], d = 4
Output: -1
Explanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.
Example 3:

Input: jobDifficulty = [1,1,1], d = 3
Output: 3
Explanation: The schedule is one job per day. total difficulty will be 3.
 

Constraints:

1 <= jobDifficulty.length <= 300
0 <= jobDifficulty[i] <= 1000
1 <= d <= 10

### Soluiton in python3 : ###

from typing import List

class Solution:
    def minDifficulty(self, jD: List[int], d: int) -> int:
        # Check if the length of the job difficulties is less than the number of days
        if len(jD) < d:
            return -1

        # Initialize a 2D array dp with dimensions (len(jD)+1) x (d+1)
        dp = [[0 for i in range(d+1)] for i in range(len(jD)+1)]

        # Initialize the last row of dp with large values
        for i in range(d+1):
            dp[len(jD)][i] = 10**6

        # Set initial values for dp based on the maximum difficulty for each job
        for i in range(len(jD)):
            dp[i][1] = max(jD[i:])

        # Iterate over the dp array to calculate the minimum difficulty
        for i in range(len(jD)-1, -1, -1):
            for j in range(2, d+1):
                ans, mx = 10**6, -1

                # Iterate over the remaining jobs and update the maximum difficulty
                for k in range(i, len(jD)):
                    mx = max(mx, jD[k])
                    temp = mx + dp[k+1][j-1]
                    ans = min(ans, temp)

                # Update the dp array with the minimum difficulty
                dp[i][j] = ans

        # Return the minimum difficulty required for all the jobs in d days
        return dp[0][d]
